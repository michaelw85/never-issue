
[19-Apr-2023 20:46:21 Europe/Amsterdam] PHP Fatal error:  A never-returning function must not return in /..../never-issue/vendor/pestphp/pest/src/Expectation.php on line 391
[19-Apr-2023 20:46:21 Europe/Amsterdam] PHP Stack trace:
[19-Apr-2023 20:46:21 Europe/Amsterdam] PHP   1. {main}() /..../never-issue/vendor/bin/pest:0
[19-Apr-2023 20:46:21 Europe/Amsterdam] PHP   2. include() /..../never-issue/vendor/bin/pest:120
[19-Apr-2023 20:46:21 Europe/Amsterdam] PHP   3. {closure:/..../never-issue/vendor/pestphp/pest/bin/pest:12-99}() /..../never-issue/vendor/pestphp/pest/bin/pest:99
[19-Apr-2023 20:46:21 Europe/Amsterdam] PHP   4. Pest\Kernel->handle($args = [0 => 'vendor/bin/pest']) /..../never-issue/vendor/pestphp/pest/bin/pest:91
[19-Apr-2023 20:46:21 Europe/Amsterdam] PHP   5. PHPUnit\TextUI\Application->run($argv = [0 => 'vendor/bin/pest', 1 => '--cache-directory=/..../never-issue/vendor/pestphp/pest/.temp', 2 => '--cache-result', 3 => '--no-output']) /..../never-issue/vendor/pestphp/pest/src/Kernel.php:86
[19-Apr-2023 20:46:21 Europe/Amsterdam] PHP   6. PHPUnit\TextUI\TestRunner->run($configuration = class PHPUnit\TextUI\Configuration\Configuration { private readonly ?string $cliArgument = NULL; private readonly ?string $configurationFile = '/..../never-issue/phpunit.xml'; private readonly ?string $bootstrap = '/..../never-issue/vendor/autoload.php'; private readonly bool $cacheResult = TRUE; private readonly ?string $cacheDirectory = '/..../never-issue/vendor/pestphp/pest/.temp'; private readonly ?string $coverageCacheDirectory = '/..../never-issue/vendor/pestphp/pest/.temp/code-coverage'; private readonly PHPUnit\TextUI\Configuration\Source $source = class PHPUnit\TextUI\Configuration\Source { private readonly PHPUnit\TextUI\Configuration\FilterDirectoryCollection $includeDirectories = class PHPUnit\TextUI\Configuration\FilterDirectoryCollection { ... }; private readonly PHPUnit\TextUI\Configuration\FileCollection $includeFiles = class PHPUnit\TextUI\Configuration\FileCollection { ... }; private readonly PHPUnit\TextUI\Configuration\FilterDirectoryCollection $excludeDirectories = class PHPUnit\TextUI\Configuration\FilterDirectoryCollection { ... }; private readonly PHPUnit\TextUI\Configuration\FileCollection $excludeFiles = class PHPUnit\TextUI\Configuration\FileCollection { ... } }; private readonly bool $restrictDeprecations = FALSE; private readonly bool $restrictNotices = FALSE; private readonly bool $restrictWarnings = FALSE; private readonly bool $pathCoverage = FALSE; private readonly ?string $coverageClover = NULL; private readonly ?string $coverageCobertura = NULL; private readonly ?string $coverageCrap4j = NULL; private readonly int $coverageCrap4jThreshold = 30; private readonly ?string $coverageHtml = NULL; private readonly int $coverageHtmlLowUpperBound = 50; private readonly int $coverageHtmlHighLowerBound = 90; private readonly string $coverageHtmlColorSuccessLow = '#dff0d8'; private readonly string $coverageHtmlColorSuccessMedium = '#c3e3b5'; private readonly string $coverageHtmlColorSuccessHigh = '#99cb84'; private readonly string $coverageHtmlColorWarning = '#fcf8e3'; private readonly string $coverageHtmlColorDanger = '#f2dede'; private readonly ?string $coverageHtmlCustomCssFile = NULL; private readonly ?string $coveragePhp = NULL; private readonly ?string $coverageText = NULL; private readonly bool $coverageTextShowUncoveredFiles = FALSE; private readonly bool $coverageTextShowOnlySummary = FALSE; private readonly ?string $coverageXml = NULL; private readonly string $testResultCacheFile = '/..../never-issue/vendor/pestphp/pest/.temp/test-results'; private readonly bool $ignoreDeprecatedCodeUnitsFromCodeCoverage = FALSE; private readonly bool $disableCodeCoverageIgnore = FALSE; private readonly bool $failOnDeprecation = FALSE; private readonly bool $failOnEmptyTestSuite = FALSE; private readonly bool $failOnIncomplete = FALSE; private readonly bool $failOnNotice = FALSE; private readonly bool $failOnRisky = FALSE; private readonly bool $failOnSkipped = FALSE; private readonly bool $failOnWarning = FALSE; private readonly bool $stopOnDefect = FALSE; private readonly bool $stopOnDeprecation = FALSE; private readonly bool $stopOnError = FALSE; private readonly bool $stopOnFailure = FALSE; private readonly bool $stopOnIncomplete = FALSE; private readonly bool $stopOnNotice = FALSE; private readonly bool $stopOnRisky = FALSE; private readonly bool $stopOnSkipped = FALSE; private readonly bool $stopOnWarning = FALSE; private readonly bool $outputToStandardErrorStream = FALSE; private readonly int $columns = 80; private readonly bool $noExtensions = FALSE; private readonly ?string $pharExtensionDirectory = NULL; private readonly array $extensionBootstrappers = []; private readonly bool $backupGlobals = FALSE; private readonly bool $backupStaticProperties = FALSE; private readonly bool $beStrictAboutChangesToGlobalState = FALSE; private readonly bool $colors = TRUE; private readonly bool $processIsolation = FALSE; private readonly bool $enforceTimeLimit = FALSE; private readonly int $defaultTimeLimit = 1; private readonly int $timeoutForSmallTests = 1; private readonly int $timeoutForMediumTests = 10; private readonly int $timeoutForLargeTests = 60; private readonly bool $reportUselessTests = TRUE; private readonly bool $strictCoverage = FALSE; private readonly bool $disallowTestOutput = FALSE; private readonly bool $displayDetailsOnIncompleteTests = FALSE; private readonly bool $displayDetailsOnSkippedTests = FALSE; private readonly bool $displayDetailsOnTestsThatTriggerDeprecations = FALSE; private readonly bool $displayDetailsOnTestsThatTriggerErrors = FALSE; private readonly bool $displayDetailsOnTestsThatTriggerNotices = FALSE; private readonly bool $displayDetailsOnTestsThatTriggerWarnings = FALSE; private readonly bool $reverseDefectList = FALSE; private readonly bool $requireCoverageMetadata = FALSE; private readonly bool $registerMockObjectsFromTestArgumentsRecursively = FALSE; private readonly bool $noProgress = FALSE; private readonly bool $noResults = FALSE; private readonly bool $noOutput = TRUE; private readonly int $executionOrder = 0; private readonly int $executionOrderDefects = 0; private readonly bool $resolveDependencies = TRUE; private readonly ?string $logfileTeamcity = NULL; private readonly ?string $logfileJunit = NULL; private readonly ?string $logfileTestdoxHtml = NULL; private readonly ?string $logfileTestdoxText = NULL; private readonly ?string $logEventsText = NULL; private readonly ?string $logEventsVerboseText = NULL; private readonly ?array $testsCovering = NULL; private readonly ?array $testsUsing = NULL; private readonly bool $teamCityOutput = FALSE; private readonly bool $testDoxOutput = FALSE; private readonly ?string $filter = NULL; private readonly ?array $groups = []; private readonly ?array $excludeGroups = []; private readonly int $randomOrderSeed = 1681929981; private readonly bool $includeUncoveredFiles = TRUE; private readonly PHPUnit\TextUI\Configuration\TestSuiteCollection $testSuite = class PHPUnit\TextUI\Configuration\TestSuiteCollection { private readonly array $testSuites = [...] }; private readonly string $includeTestSuite = ''; private readonly string $excludeTestSuite = ''; private readonly ?string $defaultTestSuite = NULL; private readonly array $testSuffixes = [0 => 'Test.php', 1 => '.phpt']; private readonly PHPUnit\TextUI\Configuration\Php $php = class PHPUnit\TextUI\Configuration\Php { private readonly PHPUnit\TextUI\Configuration\DirectoryCollection $includePaths = class PHPUnit\TextUI\Configuration\DirectoryCollection { ... }; private readonly PHPUnit\TextUI\Configuration\IniSettingCollection $iniSettings = class PHPUnit\TextUI\Configuration\IniSettingCollection { ... }; private readonly PHPUnit\TextUI\Configuration\ConstantCollection $constants = class PHPUnit\TextUI\Configuration\ConstantCollection { ... }; private readonly PHPUnit\TextUI\Configuration\VariableCollection $globalVariables = class PHPUnit\TextUI\Configuration\VariableCollection { ... }; private readonly PHPUnit\TextUI\Configuration\VariableCollection $envVariables = class PHPUnit\TextUI\Configuration\VariableCollection { ... }; private readonly PHPUnit\TextUI\Configuration\VariableCollection $postVariables = class PHPUnit\TextUI\Configuration\VariableCollection { ... }; private readonly PHPUnit\TextUI\Configuration\VariableCollection $getVariables = class PHPUnit\TextUI\Configuration\VariableCollection { ... }; private readonly PHPUnit\TextUI\Configuration\VariableCollection $cookieVariables = class PHPUnit\TextUI\Configuration\VariableCollection { ... }; private readonly PHPUnit\TextUI\Configuration\VariableCollection $serverVariables = class PHPUnit\TextUI\Configuration\VariableCollection { ... }; private readonly PHPUnit\TextUI\Configuration\VariableCollection $filesVariables = class PHPUnit\TextUI\Configuration\VariableCollection { ... }; private readonly PHPUnit\TextUI\Configuration\VariableCollection $requestVariables = class PHPUnit\TextUI\Configuration\VariableCollection { ... } } }, $resultCache = class PHPUnit\Runner\ResultCache\DefaultResultCache { private readonly string $cacheFilename = '/..../never-issue/vendor/pestphp/pest/.temp/test-results'; private array $defects = ['P\Tests\Unit\ExampleTest::__pest_evaluable_example' => class PHPUnit\Framework\TestStatus\Error { ... }]; private array $currentDefects = []; private array $times = ['P\Tests\Feature\ExampleTest::__pest_evaluable_example' => 0.005, 'P\Tests\Unit\ExampleTest::__pest_evaluable_example' => 0.148, 'P\Tests\Feature\ExamplTest::__pest_evaluable_example' => 0.003, 'P\Tests\Feature\ExamplTest::__pest_evaluable_oooo' => 0.003, 'P\Tests\Feature\ATest::__pest_evaluable_oooo' => 0.005, 'P\Tests\Unit\ATest::__pest_evaluable_a' => 0.005] }, $suite = class PHPUnit\Framework\TestSuite { protected string $name = ''; protected array $groups = ['default' => [...]]; protected ?array $requiredTests = NULL; private array $tests = [0 => class PHPUnit\Framework\TestSuite { ... }]; private ?array $providedTests = NULL; private ?PHPUnit\Runner\Filter\Factory $iteratorFilter = NULL; private readonly bool $stopOnDefect = FALSE; private readonly bool $stopOnDeprecation = FALSE; private readonly bool $stopOnError = FALSE; private readonly bool $stopOnFailure = FALSE; private readonly bool $stopOnIncomplete = FALSE; private readonly bool $stopOnNotice = FALSE; private readonly bool $stopOnRisky = FALSE; private readonly bool $stopOnSkipped = FALSE; private readonly bool $stopOnWarning = FALSE }) /..../never-issue/vendor/phpunit/phpunit/src/TextUI/Application.php:165
[19-Apr-2023 20:46:21 Europe/Amsterdam] PHP   7. PHPUnit\Framework\TestSuite->run() /..../never-issue/vendor/phpunit/phpunit/src/TextUI/TestRunner.php:63
[19-Apr-2023 20:46:21 Europe/Amsterdam] PHP   8. PHPUnit\Framework\TestSuite->run() /..../never-issue/vendor/phpunit/phpunit/src/Framework/TestSuite.php:357
[19-Apr-2023 20:46:21 Europe/Amsterdam] PHP   9. PHPUnit\Framework\TestSuite->run() /..../never-issue/vendor/phpunit/phpunit/src/Framework/TestSuite.php:357
[19-Apr-2023 20:46:21 Europe/Amsterdam] PHP  10. PHPUnit\Framework\TestCase->run() /..../never-issue/vendor/phpunit/phpunit/src/Framework/TestSuite.php:357
[19-Apr-2023 20:46:21 Europe/Amsterdam] PHP  11. PHPUnit\Framework\TestRunner->run($test = class P\Tests\Unit\ExampleTest { private ?bool ${PHPUnit\Framework\TestCase}backupGlobals = FALSE; private array ${PHPUnit\Framework\TestCase}backupGlobalsExcludeList = []; private ?bool ${PHPUnit\Framework\TestCase}backupStaticProperties = FALSE; private array ${PHPUnit\Framework\TestCase}backupStaticPropertiesExcludeList = []; private ?SebastianBergmann\GlobalState\Snapshot ${PHPUnit\Framework\TestCase}snapshot = NULL; private ?bool ${PHPUnit\Framework\TestCase}runClassInSeparateProcess = NULL; private ?bool ${PHPUnit\Framework\TestCase}runTestInSeparateProcess = NULL; private bool ${PHPUnit\Framework\TestCase}preserveGlobalState = FALSE; private bool ${PHPUnit\Framework\TestCase}inIsolation = FALSE; private ?string ${PHPUnit\Framework\TestCase}expectedException = NULL; private ?string ${PHPUnit\Framework\TestCase}expectedExceptionMessage = NULL; private ?string ${PHPUnit\Framework\TestCase}expectedExceptionMessageRegExp = NULL; private string|int|null ${PHPUnit\Framework\TestCase}expectedExceptionCode = NULL; private array ${PHPUnit\Framework\TestCase}providedTests = [0 => class PHPUnit\Framework\ExecutionOrderDependency { ... }]; private array ${PHPUnit\Framework\TestCase}data = []; private string|int ${PHPUnit\Framework\TestCase}dataName = ''; private string ${PHPUnit\Framework\TestCase}name = '__pest_evaluable_example'; private array ${PHPUnit\Framework\TestCase}groups = [0 => 'default']; private array ${PHPUnit\Framework\TestCase}dependencies = []; private array ${PHPUnit\Framework\TestCase}dependencyInput = []; private array ${PHPUnit\Framework\TestCase}iniSettings = []; private array ${PHPUnit\Framework\TestCase}locale = []; private ?PHPUnit\Framework\MockObject\Generator ${PHPUnit\Framework\TestCase}mockObjectGenerator = NULL; private array ${PHPUnit\Framework\TestCase}mockObjects = []; private bool ${PHPUnit\Framework\TestCase}registerMockObjectsFromTestArgumentsRecursively = FALSE; private PHPUnit\Framework\TestStatus\TestStatus ${PHPUnit\Framework\TestCase}status = class PHPUnit\Framework\TestStatus\Unknown { private readonly string ${PHPUnit\Framework\TestStatus\TestStatus}message = '' }; private int ${PHPUnit\Framework\TestCase}numberOfAssertionsPerformed = 0; private mixed ${PHPUnit\Framework\TestCase}testResult = NULL; private string ${PHPUnit\Framework\TestCase}output = ''; private ?string ${PHPUnit\Framework\TestCase}outputExpectedRegex = NULL; private ?string ${PHPUnit\Framework\TestCase}outputExpectedString = NULL; private bool ${PHPUnit\Framework\TestCase}outputBufferingActive = TRUE; private int ${PHPUnit\Framework\TestCase}outputBufferingLevel = 2; private bool ${PHPUnit\Framework\TestCase}outputRetrievedForAssertion = FALSE; private bool ${PHPUnit\Framework\TestCase}doesNotPerformAssertions = FALSE; private array ${PHPUnit\Framework\TestCase}customComparators = []; private ?PHPUnit\Event\Code\TestMethod ${PHPUnit\Framework\TestCase}testValueObjectForEvents = class PHPUnit\Event\Code\TestMethod { private readonly string ${PHPUnit\Event\Code\Test}file = '/..../never-issue/vendor/pestphp/pest/src/Factories/TestCaseFactory.php(196) : eval()\'d code'; private readonly string $className = 'P\\Tests\\Unit\\ExampleTest'; private readonly string $methodName = '__pest_evaluable_example'; private readonly int $line = 22; private readonly PHPUnit\Event\Code\TestDox $testDox = class PHPUnit\Event\Code\TestDox { ... }; private readonly PHPUnit\Metadata\MetadataCollection $metadata = class PHPUnit\Metadata\MetadataCollection { ... }; private readonly PHPUnit\Event\TestData\TestDataCollection $testData = class PHPUnit\Event\TestData\TestDataCollection { ... } }; private bool ${PHPUnit\Framework\TestCase}wasPrepared = TRUE; private array ${PHPUnit\Framework\TestCase}failureTypes = []; private string $__description = 'example'; private Closure $__test = class Closure { virtual $closure = "$this->Pest\Factories\{closure}", public $static = [...]; public $this = class Pest\Factories\TestCaseMethodFactory { ... } }; private ?Closure $__beforeEach = NULL; private ?Closure $__afterEach = NULL; private ?Pest\Arch\Options\TestCaseOptions $options = NULL }) /..../never-issue/vendor/phpunit/phpunit/src/Framework/TestCase.php:468
[19-Apr-2023 20:46:21 Europe/Amsterdam] PHP  12. PHPUnit\Framework\TestCase->runBare() /..../never-issue/vendor/phpunit/phpunit/src/Framework/TestRunner.php:101
[19-Apr-2023 20:46:21 Europe/Amsterdam] PHP  13. PHPUnit\Framework\TestCase->runTest() /..../never-issue/vendor/phpunit/phpunit/src/Framework/TestCase.php:632
[19-Apr-2023 20:46:21 Europe/Amsterdam] PHP  14. P\Tests\Unit\ExampleTest->__pest_evaluable_example() /..../never-issue/vendor/phpunit/phpunit/src/Framework/TestCase.php:1065
[19-Apr-2023 20:46:21 Europe/Amsterdam] PHP  15. P\Tests\Unit\ExampleTest->__runTest($closure = class Closure { virtual $closure = "$this->Pest\Factories\{closure}", public $static = ['testCase' => class Pest\Factories\TestCaseFactory { ... }, 'method' => class Pest\Factories\TestCaseMethodFactory { ... }, 'closure' => class Closure { virtual $closure = "$this->{closure}", ... }]; public $this = class Pest\Factories\TestCaseMethodFactory { public bool $todo = FALSE; public array $datasets = [...]; public array $depends = [...]; public array $groups = [...]; public array $covers = [...]; public string $filename = '/..../never-issue/tests/Unit/ExampleTest.php'; public ?string $description = 'example'; public ?Closure $closure = class Closure { virtual $closure = "$this->{closure}", ... }; public Pest\Support\HigherOrderMessageCollection $chains = class Pest\Support\HigherOrderMessageCollection { ... }; public Pest\Support\HigherOrderMessageCollection $factoryProxies = class Pest\Support\HigherOrderMessageCollection { ... }; public Pest\Support\HigherOrderMessageCollection $proxies = class Pest\Support\HigherOrderMessageCollection { ... } } }) /..../never-issue/vendor/pestphp/pest/src/Factories/TestCaseFactory.php(196) : eval()'d code:28
[19-Apr-2023 20:46:21 Europe/Amsterdam] PHP  16. P\Tests\Unit\ExampleTest->__callClosure($closure = class Closure { virtual $closure = "$this->Pest\Factories\{closure}", public $static = ['testCase' => class Pest\Factories\TestCaseFactory { ... }, 'method' => class Pest\Factories\TestCaseMethodFactory { ... }, 'closure' => class Closure { virtual $closure = "$this->{closure}", ... }]; public $this = class Pest\Factories\TestCaseMethodFactory { public bool $todo = FALSE; public array $datasets = [...]; public array $depends = [...]; public array $groups = [...]; public array $covers = [...]; public string $filename = '/..../never-issue/tests/Unit/ExampleTest.php'; public ?string $description = 'example'; public ?Closure $closure = class Closure { virtual $closure = "$this->{closure}", ... }; public Pest\Support\HigherOrderMessageCollection $chains = class Pest\Support\HigherOrderMessageCollection { ... }; public Pest\Support\HigherOrderMessageCollection $factoryProxies = class Pest\Support\HigherOrderMessageCollection { ... }; public Pest\Support\HigherOrderMessageCollection $proxies = class Pest\Support\HigherOrderMessageCollection { ... } } }, $arguments = []) /..../never-issue/vendor/pestphp/pest/src/Concerns/Testable.php:221
[19-Apr-2023 20:46:21 Europe/Amsterdam] PHP  17. Pest\Support\ExceptionTrace::ensure($closure = class Closure { virtual $closure = "$this->Pest\Concerns\{closure}", public $static = ['closure' => class Closure { virtual $closure = "$this->Pest\Factories\{closure}", ... }, 'arguments' => [...]]; public $this = class P\Tests\Unit\ExampleTest { private ?bool ${PHPUnit\Framework\TestCase}backupGlobals = FALSE; private array ${PHPUnit\Framework\TestCase}backupGlobalsExcludeList = [...]; private ?bool ${PHPUnit\Framework\TestCase}backupStaticProperties = FALSE; private array ${PHPUnit\Framework\TestCase}backupStaticPropertiesExcludeList = [...]; private ?SebastianBergmann\GlobalState\Snapshot ${PHPUnit\Framework\TestCase}snapshot = NULL; private ?bool ${PHPUnit\Framework\TestCase}runClassInSeparateProcess = NULL; private ?bool ${PHPUnit\Framework\TestCase}runTestInSeparateProcess = NULL; private bool ${PHPUnit\Framework\TestCase}preserveGlobalState = FALSE; private bool ${PHPUnit\Framework\TestCase}inIsolation = FALSE; private ?string ${PHPUnit\Framework\TestCase}expectedException = NULL; private ?string ${PHPUnit\Framework\TestCase}expectedExceptionMessage = NULL; private ?string ${PHPUnit\Framework\TestCase}expectedExceptionMessageRegExp = NULL; private string|int|null ${PHPUnit\Framework\TestCase}expectedExceptionCode = NULL; private array ${PHPUnit\Framework\TestCase}providedTests = [...]; private array ${PHPUnit\Framework\TestCase}data = [...]; private string|int ${PHPUnit\Framework\TestCase}dataName = ''; private string ${PHPUnit\Framework\TestCase}name = '__pest_evaluable_example'; private array ${PHPUnit\Framework\TestCase}groups = [...]; private array ${PHPUnit\Framework\TestCase}dependencies = [...]; private array ${PHPUnit\Framework\TestCase}dependencyInput = [...]; private array ${PHPUnit\Framework\TestCase}iniSettings = [...]; private array ${PHPUnit\Framework\TestCase}locale = [...]; private ?PHPUnit\Framework\MockObject\Generator ${PHPUnit\Framework\TestCase}mockObjectGenerator = NULL; private array ${PHPUnit\Framework\TestCase}mockObjects = [...]; private bool ${PHPUnit\Framework\TestCase}registerMockObjectsFromTestArgumentsRecursively = FALSE; private PHPUnit\Framework\TestStatus\TestStatus ${PHPUnit\Framework\TestCase}status = class PHPUnit\Framework\TestStatus\Unknown { ... }; private int ${PHPUnit\Framework\TestCase}numberOfAssertionsPerformed = 0; private mixed ${PHPUnit\Framework\TestCase}testResult = NULL; private string ${PHPUnit\Framework\TestCase}output = ''; private ?string ${PHPUnit\Framework\TestCase}outputExpectedRegex = NULL; private ?string ${PHPUnit\Framework\TestCase}outputExpectedString = NULL; private bool ${PHPUnit\Framework\TestCase}outputBufferingActive = TRUE; private int ${PHPUnit\Framework\TestCase}outputBufferingLevel = 2; private bool ${PHPUnit\Framework\TestCase}outputRetrievedForAssertion = FALSE; private bool ${PHPUnit\Framework\TestCase}doesNotPerformAssertions = FALSE; private array ${PHPUnit\Framework\TestCase}customComparators = [...]; private ?PHPUnit\Event\Code\TestMethod ${PHPUnit\Framework\TestCase}testValueObjectForEvents = class PHPUnit\Event\Code\TestMethod { ... }; private bool ${PHPUnit\Framework\TestCase}wasPrepared = TRUE; private array ${PHPUnit\Framework\TestCase}failureTypes = [...]; private string $__description = 'example'; private Closure $__test = class Closure { virtual $closure = "$this->Pest\Factories\{closure}", ... }; private ?Closure $__beforeEach = NULL; private ?Closure $__afterEach = NULL; private ?Pest\Arch\Options\TestCaseOptions $options = NULL } }) /..../never-issue/vendor/pestphp/pest/src/Concerns/Testable.php:302
[19-Apr-2023 20:46:21 Europe/Amsterdam] PHP  18. P\Tests\Unit\ExampleTest->Pest\Concerns\{closure:/..../never-issue/vendor/pestphp/pest/src/Concerns/Testable.php:302-302}() /..../never-issue/vendor/pestphp/pest/src/Support/ExceptionTrace.php:28
[19-Apr-2023 20:46:21 Europe/Amsterdam] PHP  19. call_user_func_array:{/..../never-issue/vendor/pestphp/pest/src/Concerns/Testable.php:302}($callback = class Closure { virtual $closure = "$this->Pest\Factories\{closure}", public $static = ['testCase' => class Pest\Factories\TestCaseFactory { ... }, 'method' => class Pest\Factories\TestCaseMethodFactory { ... }, 'closure' => class Closure { virtual $closure = "$this->{closure}", ... }]; public $this = class P\Tests\Unit\ExampleTest { private ?bool ${PHPUnit\Framework\TestCase}backupGlobals = FALSE; private array ${PHPUnit\Framework\TestCase}backupGlobalsExcludeList = [...]; private ?bool ${PHPUnit\Framework\TestCase}backupStaticProperties = FALSE; private array ${PHPUnit\Framework\TestCase}backupStaticPropertiesExcludeList = [...]; private ?SebastianBergmann\GlobalState\Snapshot ${PHPUnit\Framework\TestCase}snapshot = NULL; private ?bool ${PHPUnit\Framework\TestCase}runClassInSeparateProcess = NULL; private ?bool ${PHPUnit\Framework\TestCase}runTestInSeparateProcess = NULL; private bool ${PHPUnit\Framework\TestCase}preserveGlobalState = FALSE; private bool ${PHPUnit\Framework\TestCase}inIsolation = FALSE; private ?string ${PHPUnit\Framework\TestCase}expectedException = NULL; private ?string ${PHPUnit\Framework\TestCase}expectedExceptionMessage = NULL; private ?string ${PHPUnit\Framework\TestCase}expectedExceptionMessageRegExp = NULL; private string|int|null ${PHPUnit\Framework\TestCase}expectedExceptionCode = NULL; private array ${PHPUnit\Framework\TestCase}providedTests = [...]; private array ${PHPUnit\Framework\TestCase}data = [...]; private string|int ${PHPUnit\Framework\TestCase}dataName = ''; private string ${PHPUnit\Framework\TestCase}name = '__pest_evaluable_example'; private array ${PHPUnit\Framework\TestCase}groups = [...]; private array ${PHPUnit\Framework\TestCase}dependencies = [...]; private array ${PHPUnit\Framework\TestCase}dependencyInput = [...]; private array ${PHPUnit\Framework\TestCase}iniSettings = [...]; private array ${PHPUnit\Framework\TestCase}locale = [...]; private ?PHPUnit\Framework\MockObject\Generator ${PHPUnit\Framework\TestCase}mockObjectGenerator = NULL; private array ${PHPUnit\Framework\TestCase}mockObjects = [...]; private bool ${PHPUnit\Framework\TestCase}registerMockObjectsFromTestArgumentsRecursively = FALSE; private PHPUnit\Framework\TestStatus\TestStatus ${PHPUnit\Framework\TestCase}status = class PHPUnit\Framework\TestStatus\Unknown { ... }; private int ${PHPUnit\Framework\TestCase}numberOfAssertionsPerformed = 0; private mixed ${PHPUnit\Framework\TestCase}testResult = NULL; private string ${PHPUnit\Framework\TestCase}output = ''; private ?string ${PHPUnit\Framework\TestCase}outputExpectedRegex = NULL; private ?string ${PHPUnit\Framework\TestCase}outputExpectedString = NULL; private bool ${PHPUnit\Framework\TestCase}outputBufferingActive = TRUE; private int ${PHPUnit\Framework\TestCase}outputBufferingLevel = 2; private bool ${PHPUnit\Framework\TestCase}outputRetrievedForAssertion = FALSE; private bool ${PHPUnit\Framework\TestCase}doesNotPerformAssertions = FALSE; private array ${PHPUnit\Framework\TestCase}customComparators = [...]; private ?PHPUnit\Event\Code\TestMethod ${PHPUnit\Framework\TestCase}testValueObjectForEvents = class PHPUnit\Event\Code\TestMethod { ... }; private bool ${PHPUnit\Framework\TestCase}wasPrepared = TRUE; private array ${PHPUnit\Framework\TestCase}failureTypes = [...]; private string $__description = 'example'; private Closure $__test = class Closure { virtual $closure = "$this->Pest\Factories\{closure}", ... }; private ?Closure $__beforeEach = NULL; private ?Closure $__afterEach = NULL; private ?Pest\Arch\Options\TestCaseOptions $options = NULL } }, $args = []) /..../never-issue/vendor/pestphp/pest/src/Concerns/Testable.php:302
[19-Apr-2023 20:46:21 Europe/Amsterdam] PHP  20. P\Tests\Unit\ExampleTest->Pest\Factories\{closure:/..../never-issue/vendor/pestphp/pest/src/Factories/TestCaseMethodFactory.php:92-101}() /..../never-issue/vendor/pestphp/pest/src/Concerns/Testable.php:302
[19-Apr-2023 20:46:21 Europe/Amsterdam] PHP  21. P\Tests\Unit\ExampleTest->{closure:/..../never-issue/tests/Unit/ExampleTest.php:6-12}() /..../never-issue/vendor/pestphp/pest/src/Factories/TestCaseMethodFactory.php:100
[19-Apr-2023 20:46:21 Europe/Amsterdam] PHP  22. expect($value = TRUE) /..../never-issue/tests/Unit/ExampleTest.php:11
[19-Apr-2023 20:46:21 Europe/Amsterdam] PHP  23. Composer\Autoload\ClassLoader->loadClass($class = 'Pest\\Expectation') /..../never-issue/vendor/pestphp/pest/src/Functions.php:28
[19-Apr-2023 20:46:21 Europe/Amsterdam] PHP  24. Composer\Autoload\{closure:/..../never-issue/vendor/composer/ClassLoader.php:581-583}($file = '/..../never-issue/vendor/composer/../pestphp/pest/src/Expectation.php') /..../never-issue/vendor/composer/ClassLoader.php:433
